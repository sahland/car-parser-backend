import time
import json
import os
import re
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains

from utils.selenium_setup import get_driver
from utils.parser_helpers import *
from utils.brand_utils import extract_brand
from utils.currency import get_cny_to_rub_rate

def parse_che168_selenium():
    driver = get_driver(headless=False)
    driver.get("https://m.che168.com/beijing/list/")

    # –ñ–¥—ë–º, –ø–æ–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –ø–µ—Ä–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    try:
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//div[contains(@style,'flex-direction: row')]"))
        )
    except:
        print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        driver.quit()
        return []

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
    scroll_pause_time = 3
    max_scroll_attempts = 50
    previous_card_count = 0
    attempts_without_new_cards = 0

    while attempts_without_new_cards < 5:
        actions = ActionChains(driver)
        actions.move_to_element(driver.find_element(By.TAG_NAME, "body")).perform()
        driver.execute_script("window.scrollBy(0, 500);")
        time.sleep(scroll_pause_time)

        cards = driver.find_elements(By.XPATH, "//div[contains(@style,'flex-direction: row')]")
        current_card_count = len(cards)
        print(f"üîé –ü—Ä–æ–∫—Ä—É—Ç–∫–∞: –Ω–∞–π–¥–µ–Ω–æ {current_card_count} –∫–∞—Ä—Ç–æ—á–µ–∫")

        if current_card_count == previous_card_count:
            attempts_without_new_cards += 1
            print(f"‚ö†Ô∏è –ù–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å ({attempts_without_new_cards}/5)")
        else:
            attempts_without_new_cards = 0

        previous_card_count = current_card_count

        if attempts_without_new_cards >= 5:
            print("‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç")
            break

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–∞—Ä—Ç–æ—á–µ–∫
    yuan_rate = get_cny_to_rub_rate()
    cars_data = []

    cards = driver.find_elements(By.XPATH, "//div[contains(@style,'flex-direction: row')]")
    print(f"üîé –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")

    for card in cards:
        text = card.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã
        price_match = re.search(r"(\d+(?:\.\d+)?)\s*‰∏á", text)
        if not price_match:
            print(f"–ò—Å–∫–ª—é—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ —Ü–µ–Ω—ã: {text}")
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Ö–æ—Ç—è –±—ã 2 –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã)
        name_match = re.search(r"[‰∏Ä-Èæ•]{2,}|[\w\s-]{3,}", text)
        if not name_match:
            print(f"–ò—Å–∫–ª—é—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ –∏–º–µ–Ω–∏: {text}")
            continue

        try:
            image_els = card.find_elements(By.TAG_NAME, "img")
            image = image_els[0].get_attribute("src") if image_els else ""
            # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Å –∑–∞–≥–ª—É—à–∫–æ–π
            if not image or "collect_grey" in image:
                print(f"–ò—Å–∫–ª—é—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {text}")
                continue

            name_raw = clean_name(text)
            name = clean_display_name(name_raw)
            brand = extract_brand(text, source="che168")

            parts = text.split("\n")
            mileage_block = next((part for part in parts if "/" in part and "Âπ¥" in part), "")
            if mileage_block:
                year = normalize_year(mileage_block.split("/")[0].strip()) if "/" in mileage_block else "‚Äî"
                mileage = normalize_mileage(mileage_block.split("/")[1].strip()) if "/" in mileage_block else "‚Äî"
            else:
                year = "‚Äî"
                mileage = "‚Äî"

            raw_price_yuan = float(price_match.group(1))
            price_yuan_val = raw_price_yuan * 10000

            car = {
                "name": name,
                "brand": brand,
                "year": year,
                "price": round(price_yuan_val * yuan_rate),
                "price_yuan": round(raw_price_yuan, 2),
                "yuan_to_rub": yuan_rate,
                "mileage": mileage,
                "fuel_type": "‚Äî",
                "power": "‚Äî",
                "drive": "‚Äî",
                "engine_volume": "2.0",
                "image": image
            }
            cars_data.append(car)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")

    driver.quit()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —á–µ—Ä–µ–∑ Selenium")
    return cars_data